// <auto-generated />
using System;
using Fasor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fasor.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250518051759_AddNewEntitiesForCrudAdmin")]
    partial class AddNewEntitiesForCrudAdmin
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyCompanyRide", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyRideId")
                        .HasColumnType("uuid");

                    b.HasKey("CompanyId", "CompanyRideId");

                    b.HasIndex("CompanyRideId");

                    b.ToTable("CompanyCompanyRide");
                });

            modelBuilder.Entity("CompanyRide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyRides");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.AppService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyRideId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NameService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyRideId");

                    b.ToTable("AppServices");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("NameService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.RideOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyRideId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EstimatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeRide")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlRedirect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppServiceId");

                    b.HasIndex("CompanyRideId");

                    b.HasIndex("QuoteId");

                    b.ToTable("RideOptions");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.RideQuote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("LatitudeDestination")
                        .HasColumnType("real");

                    b.Property<float>("LatitudeOrigin")
                        .HasColumnType("real");

                    b.Property<float>("LongitudeDestination")
                        .HasColumnType("real");

                    b.Property<float>("LongitudeOrigin")
                        .HasColumnType("real");

                    b.Property<string>("OriginAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RideQuotes");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CompanyCompanyRide", b =>
                {
                    b.HasOne("Fasor.Domain.Aggregates.Company", "Company")
                        .WithMany("CompanyCompanyRides")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyRide", "CompanyRide")
                        .WithMany("CompanyCompanyRides")
                        .HasForeignKey("CompanyRideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyRide");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.AppService", b =>
                {
                    b.HasOne("CompanyRide", "CompanyRide")
                        .WithMany("AppServices")
                        .HasForeignKey("CompanyRideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyRide");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.RideOption", b =>
                {
                    b.HasOne("Fasor.Domain.Aggregates.AppService", "AppService")
                        .WithMany()
                        .HasForeignKey("AppServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CompanyRide", "CompanyRide")
                        .WithMany()
                        .HasForeignKey("CompanyRideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fasor.Domain.Aggregates.RideQuote", "RideQuote")
                        .WithMany("RideOptions")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppService");

                    b.Navigation("CompanyRide");

                    b.Navigation("RideQuote");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.RideQuote", b =>
                {
                    b.HasOne("Fasor.Domain.Aggregates.User", "User")
                        .WithMany("RideQuotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.User", b =>
                {
                    b.HasOne("Fasor.Domain.Aggregates.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CompanyRide", b =>
                {
                    b.Navigation("AppServices");

                    b.Navigation("CompanyCompanyRides");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.Company", b =>
                {
                    b.Navigation("CompanyCompanyRides");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.RideQuote", b =>
                {
                    b.Navigation("RideOptions");
                });

            modelBuilder.Entity("Fasor.Domain.Aggregates.User", b =>
                {
                    b.Navigation("RideQuotes");
                });
#pragma warning restore 612, 618
        }
    }
}
